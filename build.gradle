import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'application'
    id 'eclipse'
    id 'idea'
    id 'findbugs'
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.13.0"
    id "com.jfrog.bintray" version "1.7.2"
    id "org.asciidoctor.convert" version "1.5.3"
    id "org.ajoberstar.git-publish" version "0.1.0"
    id "com.github.hierynomus.license" version "0.14.0"
    id "net.saliman.properties" version "1.4.6"
    id 'com.github.jk1.dependency-license-report' version '0.3.8'
    id "com.dorongold.task-tree" version "1.3"
    id "com.moowork.node" version "1.1.1"
}

project.version.with {
    major = textIoWebExampleVersionMajor as int
    minor= textIoWebExampleVersionMinor as int
    patch = textIoWebExampleVersionPatch as int
    if (project.hasProperty('textIoWebExampleVersionLabel')) {
        preRelease = textIoWebExampleVersionLabel
    }
    releaseBuild = Boolean.valueOf(textIoWebExampleReleaseBuild)
}
ext.textIoWebExampleVersion = project.version as String
ext.textIoWebExampleTag = Boolean.valueOf(textIoWebExampleReleaseBuild) ? "v$ext.textIoWebExampleVersion" : 'master'

repositories {
  jcenter()
  mavenCentral()
}

def pomConfig = {
    url "https://github.com/beryx/text-io-web-example"
    developers {
    }
    scm {
        connection "https://github.com/beryx/text-io-web-example.git"
        developerConnection "https://github.com/beryx/text-io-web-example.git"
        url "https://github.com/beryx/text-io-web-example"
    }
}

group = 'org.beryx'
version = textIoWebExampleVersion

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:all,-syntax,-missing', '-quiet')
}

repositories {
    jcenter()
    mavenCentral()
}

sourceCompatibility = 1.8

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

configurations {
  provided
  compile {transitive = true}
}

license {
    header rootProject.file("license-header.txt")
    skipExistingHeaders true
    ignoreFailures false
    excludes(["**/*.properties", "**/static"])
}


dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile 'org.beryx:text-io-web:2.6.0'
    compile 'io.ratpack:ratpack-core:1.4.6'
    compile 'io.ratpack:ratpack-session:1.4.6'

    provided 'com.google.code.findbugs:findbugs-annotations:3.0.1'

    runtime ('ch.qos.logback:logback-classic:1.2.2')
}

sourceSets.main.compileClasspath += configurations.provided
findbugs {
    effort = "max"
    excludeFilter = file("$rootProject.projectDir/findbugsExclude.xml")
}
jar {
    manifest {
        attributes 'Implementation-Title': "${project.archivesBaseName}",
                'Implementation-Version': textIoWebExampleVersion
    }

    from ("${projectDir}/src/main/java") {
        include('**/*.fxml')
        include('**/*.css')
        include('**/*.png')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier "javadoc"
    from javadoc
}
artifacts {
    (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, javadocJar)
}

task "create-dirs" {
    doLast {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}

eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('0', 'javafx/**'))
            }
        }
        plusConfigurations << configurations.provided
    }
    project {
        file.beforeMerged { project ->
            project.natures.clear()
        }
    }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

def gitIgnore = file(".gitignore").readLines()
def gitIgnoreDirs = gitIgnore*.trim().findAll { !it.startsWith("#") && it.endsWith("/") }
asciidoctor {
  sourceDir = file("doc")
  sources {include 'index.adoc'}
  logDocuments = true
  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
             icons: 'font',
             imagesdir: 'img',
             'data-uri': '',
             linkattrs: true,
             linkcss: true,
             'git-tag': textIoWebExampleTag,
             'blob-root': "https://github.com/beryx/text-io-web-example/blob/$textIoWebExampleTag"
}

gitPublish {
    System.properties['org.ajoberstar.grgit.auth.username'] = System.getenv('GH_PAGES_ACCESS_TOKEN') ?: ''
    System.properties['org.ajoberstar.grgit.auth.password'] = ''

    repoUri = 'https://github.com/beryx/text-io-web-example.git'
    branch = 'gh-pages'

    contents {
        def pgType = project.hasProperty('ghPageType') ? ghPageType : 'latest'
        if(pgType == 'init') {
            from file("ghpages")
        } else {
            from file("${asciidoctor.outputDir.path}/html5")
            from file("build/docs")
        }
        def docDir = Boolean.valueOf(textIoWebExampleReleaseBuild) ? 'releases' : 'snapshots'
        if(pgType == 'init') {
            into "."
        } else if(pgType == 'version') {
            gitPublishPush.enabled = (docDir != 'snapshots')
            into "$docDir/$textIoWebExampleVersion"

            preserve {
                include '**'
                exclude "$docDir/$textIoWebExampleVersion"
            }
        } else {
            into "$docDir/latest"

            preserve {
                include '**'
                exclude "$docDir/latest"
            }
        }
    }
}  



artifacts {
    (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, javadocJar)
}
jar {
    manifest {
        attributes 'Main-Class': 'org.beryx.textio.web.example.ExampleMain'
    }
}
mainClassName = 'org.beryx.textio.web.example.ExampleMain'

applicationName = "textIoWebExample"

startScripts {
    defaultJvmOpts = ['-Dlogback.configurationFile=logback.xml']
}

applicationDistribution.from("${rootProject.projectDir}/dist") {
    filter(ReplaceTokens, tokens:[textIoWebExampleVersion : textIoWebExampleVersion])
}

applicationDistribution.from("${rootProject.projectDir}/..") {
    include('LICENSE', 'NOTICE')
}

configureJavadoc(javadoc)

def configureJavadoc(task) {
  configure(task) {
      title "text-io-web-example Documentation ($textIoWebExampleVersion)"
      destinationDir file("build/docs/javadoc")
      if(project.configurations.hasProperty('provided')) {
          classpath += project.configurations.provided
      }
      configure(options) {
          links "http://docs.oracle.com/javase/8/docs/api/"
      }
  }
}

node {
    version = '7.8.0'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    nodeModulesDir = file("${project.projectDir}/src/web")
}

task runWebpack(type: NpmTask, dependsOn: 'npmInstall') {
    inputs.dir('src/web')
    outputs.dir('src/main/resources/static')
    outputs.file('src/main/resources/static/index.html')
    args = ['run', 'webpack']
}

processResources.dependsOn runWebpack
